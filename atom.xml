<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  <icon>https://sillycross.github.io/icon.png</icon>
  <subtitle>「こんなきれいな星も、やっぱりここまで来てから、見れたのだと思うから。だから・・もっと遠くへ・・」</subtitle>
  <link href="https://sillycross.github.io/atom.xml" rel="self"/>
  
  <link href="https://sillycross.github.io/"/>
  <updated>2023-06-12T07:21:31.262Z</updated>
  <id>https://sillycross.github.io/</id>
  
  <author>
    <name>Haoran Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Debugging a Bit-Flip Error</title>
    <link href="https://sillycross.github.io/2023/06/11/2023-06-11/"/>
    <id>https://sillycross.github.io/2023/06/11/2023-06-11/</id>
    <published>2023-06-11T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.262Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Some day last week, I was writing code for &lt;a href=&quot;https://github.com/luajit-remake/luajit-remake&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;my</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Building a baseline JIT for Lua automatically</title>
    <link href="https://sillycross.github.io/2023/05/12/2023-05-12/"/>
    <id>https://sillycross.github.io/2023/05/12/2023-05-12/</id>
    <published>2023-05-12T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.262Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;text style=&quot;font-size:15px;&quot;&gt;This is the Part 2 of a series. Feel free to read the prequel for more context: &lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Building the fastest Lua interpreter.. automatically!</title>
    <link href="https://sillycross.github.io/2022/11/22/2022-11-22/"/>
    <id>https://sillycross.github.io/2022/11/22/2022-11-22/</id>
    <published>2022-11-22T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.262Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;text style=&quot;font-size:15px;&quot;&gt;This is Part 1 of a series of posts.&lt;br&gt; Part 2 is available here: &lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Pitfalls of using C++ Global Variable Constructor as a Registration Mechanism</title>
    <link href="https://sillycross.github.io/2022/10/02/2022-10-02/"/>
    <id>https://sillycross.github.io/2022/10/02/2022-10-02/</id>
    <published>2022-10-02T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.262Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I recently hit the following use case in my project: I have a function &lt;code&gt;RunAllPasses(obj)&lt;/code&gt;, which runs a list of</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>How to check if a real number is an integer in C++?</title>
    <link href="https://sillycross.github.io/2022/07/18/2022-07-18/"/>
    <id>https://sillycross.github.io/2022/07/18/2022-07-18/</id>
    <published>2022-07-18T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.262Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I have a &lt;code&gt;double&lt;/code&gt;, and I want to know if its value is an integer that fits in a &lt;code&gt;int64_t&lt;/code&gt;. How can I do it in</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Bizarre Performance Characteristics of Alder Lake CPU</title>
    <link href="https://sillycross.github.io/2022/06/11/2022-06-11/"/>
    <id>https://sillycross.github.io/2022/06/11/2022-06-11/</id>
    <published>2022-06-11T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.262Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;TL;DR: Some of the P-cores in Alder Lake CPU can exhibit highly unstable performance behavior, resulting in large noise for any</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Understanding GC in JSC From Scratch</title>
    <link href="https://sillycross.github.io/2022/06/02/2022-06-02/"/>
    <id>https://sillycross.github.io/2022/06/02/2022-06-02/</id>
    <published>2022-06-02T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.262Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Javascript relies on garbage collection (GC) to reclaim memory. In this post, we will dig a little bit into JSC (the Javascript engine</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NP70PNP + Ubuntu Tweak Notes</title>
    <link href="https://sillycross.github.io/2022/05/31/2022-05-31/"/>
    <id>https://sillycross.github.io/2022/05/31/2022-05-31/</id>
    <published>2022-05-31T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Recently I decided to get a new laptop to replace my 5-years-old one. I happened to discover something called “barebone laptop”, which</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>The Watchpoint Mechanism in JSC</title>
    <link href="https://sillycross.github.io/2022/04/30/2022-04-30/"/>
    <id>https://sillycross.github.io/2022/04/30/2022-04-30/</id>
    <published>2022-04-30T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;While Javascript has a simple syntax, what happens behind the scene is far from simple. For example, consider this innocent-looking</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Note on x86-64 Memory Model</title>
    <link href="https://sillycross.github.io/2022/04/26/2022-04-26/"/>
    <id>https://sillycross.github.io/2022/04/26/2022-04-26/</id>
    <published>2022-04-26T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;In the past years, I have undergone a few cycles of learning the x86-64 memory model, only to eventually forget it again. Today I was</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>From X Macro to FOR_EACH to Cartesian Product Enumeration with C Macro</title>
    <link href="https://sillycross.github.io/2022/04/01/2022-04-01/"/>
    <id>https://sillycross.github.io/2022/04/01/2022-04-01/</id>
    <published>2022-04-01T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Quite a while ago I was implementing an interpreter. A common task in the interpreter is to select the correct interpreter function</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Some Random Thoughts</title>
    <link href="https://sillycross.github.io/2021/10/24/2021-10-24/"/>
    <id>https://sillycross.github.io/2021/10/24/2021-10-24/</id>
    <published>2021-10-24T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Recently I attended the &lt;a href=&quot;https://2021.splashcon.org/track/splash-2021-oopsla#event-overview&quot; target=&quot;_blank&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Understanding JavaScriptCore&#39;s DFG JIT: CPS Rethreading Pass</title>
    <link href="https://sillycross.github.io/2021/09/20/2021-09-20/"/>
    <id>https://sillycross.github.io/2021/09/20/2021-09-20/</id>
    <published>2021-09-20T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;This is another note on JavaScriptCore (JSC)&#39;s DFG JIT. The topic today is on DFG’s IR design and a related optimizer pass called</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Static Analysis in JavaScriptCore (Part I)</title>
    <link href="https://sillycross.github.io/2021/09/12/2021-09-12/"/>
    <id>https://sillycross.github.io/2021/09/12/2021-09-12/</id>
    <published>2021-09-12T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Recently I’ve been spending time to understand some internals of JavaScriptCore (JSC), the Javascript JIT compiler powering the Safari</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Some Experiment Notes on Pitching and Storytelling</title>
    <link href="https://sillycross.github.io/2021/09/03/2021-09-03/"/>
    <id>https://sillycross.github.io/2021/09/03/2021-09-03/</id>
    <published>2021-09-03T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;A while ago I had been co-lecturing a small group of OI students with Richard. I was impressed how he could just take over any talk on</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>A Trick for Reflection in C++</title>
    <link href="https://sillycross.github.io/2021/08/23/2021-08-23/"/>
    <id>https://sillycross.github.io/2021/08/23/2021-08-23/</id>
    <published>2021-08-23T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Yesterday I got into the following problem. I want to allow certain C++ struct definitions in my code to be reflectively inspected. For</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>The Overhead of Non-native Stacks (AKA, How Amazingly Hard it is to Get a Microbenchmark Done Right)</title>
    <link href="https://sillycross.github.io/2021/08/09/2021-08-09/"/>
    <id>https://sillycross.github.io/2021/08/09/2021-08-09/</id>
    <published>2021-08-09T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Today I got into a question loosely related to my research. Many language VMs choose to implement their own call stack, instead of</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Motivation for Yet Another Blog</title>
    <link href="https://sillycross.github.io/2021/08/07/2021-08-07/"/>
    <id>https://sillycross.github.io/2021/08/07/2021-08-07/</id>
    <published>2021-08-07T00:00:00.000Z</published>
    <updated>2023-06-12T07:21:31.258Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I used to maintain a blog while I was in high school, like many others who have participated in &lt;a</summary>
        
      
    
    
    
    
  </entry>
  
</feed>
